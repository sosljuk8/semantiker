// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"semantiker/orm/ent/cores"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CoresCreate is the builder for creating a Cores entity.
type CoresCreate struct {
	config
	mutation *CoresMutation
	hooks    []Hook
}

// SetName sets the "Name" field.
func (cc *CoresCreate) SetName(s string) *CoresCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetStatus sets the "Status" field.
func (cc *CoresCreate) SetStatus(s string) *CoresCreate {
	cc.mutation.SetStatus(s)
	return cc
}

// SetCount sets the "Count" field.
func (cc *CoresCreate) SetCount(i int) *CoresCreate {
	cc.mutation.SetCount(i)
	return cc
}

// SetNillableCount sets the "Count" field if the given value is not nil.
func (cc *CoresCreate) SetNillableCount(i *int) *CoresCreate {
	if i != nil {
		cc.SetCount(*i)
	}
	return cc
}

// SetCreated sets the "Created" field.
func (cc *CoresCreate) SetCreated(s string) *CoresCreate {
	cc.mutation.SetCreated(s)
	return cc
}

// SetNillableCreated sets the "Created" field if the given value is not nil.
func (cc *CoresCreate) SetNillableCreated(s *string) *CoresCreate {
	if s != nil {
		cc.SetCreated(*s)
	}
	return cc
}

// SetUpdated sets the "Updated" field.
func (cc *CoresCreate) SetUpdated(s string) *CoresCreate {
	cc.mutation.SetUpdated(s)
	return cc
}

// SetNillableUpdated sets the "Updated" field if the given value is not nil.
func (cc *CoresCreate) SetNillableUpdated(s *string) *CoresCreate {
	if s != nil {
		cc.SetUpdated(*s)
	}
	return cc
}

// Mutation returns the CoresMutation object of the builder.
func (cc *CoresCreate) Mutation() *CoresMutation {
	return cc.mutation
}

// Save creates the Cores in the database.
func (cc *CoresCreate) Save(ctx context.Context) (*Cores, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CoresCreate) SaveX(ctx context.Context) *Cores {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CoresCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CoresCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CoresCreate) defaults() {
	if _, ok := cc.mutation.Count(); !ok {
		v := cores.DefaultCount
		cc.mutation.SetCount(v)
	}
	if _, ok := cc.mutation.Created(); !ok {
		v := cores.DefaultCreated()
		cc.mutation.SetCreated(v)
	}
	if _, ok := cc.mutation.Updated(); !ok {
		v := cores.DefaultUpdated()
		cc.mutation.SetUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CoresCreate) check() error {
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "Name", err: errors.New(`ent: missing required field "Cores.Name"`)}
	}
	if _, ok := cc.mutation.Status(); !ok {
		return &ValidationError{Name: "Status", err: errors.New(`ent: missing required field "Cores.Status"`)}
	}
	if _, ok := cc.mutation.Count(); !ok {
		return &ValidationError{Name: "Count", err: errors.New(`ent: missing required field "Cores.Count"`)}
	}
	if _, ok := cc.mutation.Created(); !ok {
		return &ValidationError{Name: "Created", err: errors.New(`ent: missing required field "Cores.Created"`)}
	}
	if _, ok := cc.mutation.Updated(); !ok {
		return &ValidationError{Name: "Updated", err: errors.New(`ent: missing required field "Cores.Updated"`)}
	}
	return nil
}

func (cc *CoresCreate) sqlSave(ctx context.Context) (*Cores, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CoresCreate) createSpec() (*Cores, *sqlgraph.CreateSpec) {
	var (
		_node = &Cores{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(cores.Table, sqlgraph.NewFieldSpec(cores.FieldID, field.TypeInt))
	)
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(cores.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Status(); ok {
		_spec.SetField(cores.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := cc.mutation.Count(); ok {
		_spec.SetField(cores.FieldCount, field.TypeInt, value)
		_node.Count = value
	}
	if value, ok := cc.mutation.Created(); ok {
		_spec.SetField(cores.FieldCreated, field.TypeString, value)
		_node.Created = value
	}
	if value, ok := cc.mutation.Updated(); ok {
		_spec.SetField(cores.FieldUpdated, field.TypeString, value)
		_node.Updated = value
	}
	return _node, _spec
}

// CoresCreateBulk is the builder for creating many Cores entities in bulk.
type CoresCreateBulk struct {
	config
	err      error
	builders []*CoresCreate
}

// Save creates the Cores entities in the database.
func (ccb *CoresCreateBulk) Save(ctx context.Context) ([]*Cores, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Cores, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CoresMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CoresCreateBulk) SaveX(ctx context.Context) []*Cores {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CoresCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CoresCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
