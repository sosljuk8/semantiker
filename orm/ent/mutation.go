// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"semantiker/orm/ent/cores"
	"semantiker/orm/ent/predicate"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCores = "Cores"
)

// CoresMutation represents an operation that mutates the Cores nodes in the graph.
type CoresMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_Name         *string
	_Status       *string
	_Count        *int
	add_Count     *int
	_Created      *string
	_Updated      *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Cores, error)
	predicates    []predicate.Cores
}

var _ ent.Mutation = (*CoresMutation)(nil)

// coresOption allows management of the mutation configuration using functional options.
type coresOption func(*CoresMutation)

// newCoresMutation creates new mutation for the Cores entity.
func newCoresMutation(c config, op Op, opts ...coresOption) *CoresMutation {
	m := &CoresMutation{
		config:        c,
		op:            op,
		typ:           TypeCores,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCoresID sets the ID field of the mutation.
func withCoresID(id int) coresOption {
	return func(m *CoresMutation) {
		var (
			err   error
			once  sync.Once
			value *Cores
		)
		m.oldValue = func(ctx context.Context) (*Cores, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Cores.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCores sets the old Cores of the mutation.
func withCores(node *Cores) coresOption {
	return func(m *CoresMutation) {
		m.oldValue = func(context.Context) (*Cores, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CoresMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CoresMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CoresMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CoresMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Cores.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "Name" field.
func (m *CoresMutation) SetName(s string) {
	m._Name = &s
}

// Name returns the value of the "Name" field in the mutation.
func (m *CoresMutation) Name() (r string, exists bool) {
	v := m._Name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "Name" field's value of the Cores entity.
// If the Cores object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoresMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "Name" field.
func (m *CoresMutation) ResetName() {
	m._Name = nil
}

// SetStatus sets the "Status" field.
func (m *CoresMutation) SetStatus(s string) {
	m._Status = &s
}

// Status returns the value of the "Status" field in the mutation.
func (m *CoresMutation) Status() (r string, exists bool) {
	v := m._Status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "Status" field's value of the Cores entity.
// If the Cores object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoresMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "Status" field.
func (m *CoresMutation) ResetStatus() {
	m._Status = nil
}

// SetCount sets the "Count" field.
func (m *CoresMutation) SetCount(i int) {
	m._Count = &i
	m.add_Count = nil
}

// Count returns the value of the "Count" field in the mutation.
func (m *CoresMutation) Count() (r int, exists bool) {
	v := m._Count
	if v == nil {
		return
	}
	return *v, true
}

// OldCount returns the old "Count" field's value of the Cores entity.
// If the Cores object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoresMutation) OldCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCount: %w", err)
	}
	return oldValue.Count, nil
}

// AddCount adds i to the "Count" field.
func (m *CoresMutation) AddCount(i int) {
	if m.add_Count != nil {
		*m.add_Count += i
	} else {
		m.add_Count = &i
	}
}

// AddedCount returns the value that was added to the "Count" field in this mutation.
func (m *CoresMutation) AddedCount() (r int, exists bool) {
	v := m.add_Count
	if v == nil {
		return
	}
	return *v, true
}

// ResetCount resets all changes to the "Count" field.
func (m *CoresMutation) ResetCount() {
	m._Count = nil
	m.add_Count = nil
}

// SetCreated sets the "Created" field.
func (m *CoresMutation) SetCreated(s string) {
	m._Created = &s
}

// Created returns the value of the "Created" field in the mutation.
func (m *CoresMutation) Created() (r string, exists bool) {
	v := m._Created
	if v == nil {
		return
	}
	return *v, true
}

// OldCreated returns the old "Created" field's value of the Cores entity.
// If the Cores object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoresMutation) OldCreated(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreated: %w", err)
	}
	return oldValue.Created, nil
}

// ResetCreated resets all changes to the "Created" field.
func (m *CoresMutation) ResetCreated() {
	m._Created = nil
}

// SetUpdated sets the "Updated" field.
func (m *CoresMutation) SetUpdated(s string) {
	m._Updated = &s
}

// Updated returns the value of the "Updated" field in the mutation.
func (m *CoresMutation) Updated() (r string, exists bool) {
	v := m._Updated
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdated returns the old "Updated" field's value of the Cores entity.
// If the Cores object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoresMutation) OldUpdated(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdated: %w", err)
	}
	return oldValue.Updated, nil
}

// ResetUpdated resets all changes to the "Updated" field.
func (m *CoresMutation) ResetUpdated() {
	m._Updated = nil
}

// Where appends a list predicates to the CoresMutation builder.
func (m *CoresMutation) Where(ps ...predicate.Cores) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CoresMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CoresMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Cores, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CoresMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CoresMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Cores).
func (m *CoresMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CoresMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m._Name != nil {
		fields = append(fields, cores.FieldName)
	}
	if m._Status != nil {
		fields = append(fields, cores.FieldStatus)
	}
	if m._Count != nil {
		fields = append(fields, cores.FieldCount)
	}
	if m._Created != nil {
		fields = append(fields, cores.FieldCreated)
	}
	if m._Updated != nil {
		fields = append(fields, cores.FieldUpdated)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CoresMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case cores.FieldName:
		return m.Name()
	case cores.FieldStatus:
		return m.Status()
	case cores.FieldCount:
		return m.Count()
	case cores.FieldCreated:
		return m.Created()
	case cores.FieldUpdated:
		return m.Updated()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CoresMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case cores.FieldName:
		return m.OldName(ctx)
	case cores.FieldStatus:
		return m.OldStatus(ctx)
	case cores.FieldCount:
		return m.OldCount(ctx)
	case cores.FieldCreated:
		return m.OldCreated(ctx)
	case cores.FieldUpdated:
		return m.OldUpdated(ctx)
	}
	return nil, fmt.Errorf("unknown Cores field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoresMutation) SetField(name string, value ent.Value) error {
	switch name {
	case cores.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case cores.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case cores.FieldCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCount(v)
		return nil
	case cores.FieldCreated:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreated(v)
		return nil
	case cores.FieldUpdated:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdated(v)
		return nil
	}
	return fmt.Errorf("unknown Cores field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CoresMutation) AddedFields() []string {
	var fields []string
	if m.add_Count != nil {
		fields = append(fields, cores.FieldCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CoresMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case cores.FieldCount:
		return m.AddedCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoresMutation) AddField(name string, value ent.Value) error {
	switch name {
	case cores.FieldCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCount(v)
		return nil
	}
	return fmt.Errorf("unknown Cores numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CoresMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CoresMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CoresMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Cores nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CoresMutation) ResetField(name string) error {
	switch name {
	case cores.FieldName:
		m.ResetName()
		return nil
	case cores.FieldStatus:
		m.ResetStatus()
		return nil
	case cores.FieldCount:
		m.ResetCount()
		return nil
	case cores.FieldCreated:
		m.ResetCreated()
		return nil
	case cores.FieldUpdated:
		m.ResetUpdated()
		return nil
	}
	return fmt.Errorf("unknown Cores field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CoresMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CoresMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CoresMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CoresMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CoresMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CoresMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CoresMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Cores unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CoresMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Cores edge %s", name)
}
