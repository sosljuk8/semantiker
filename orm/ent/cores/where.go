// Code generated by ent, DO NOT EDIT.

package cores

import (
	"semantiker/orm/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Cores {
	return predicate.Cores(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Cores {
	return predicate.Cores(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Cores {
	return predicate.Cores(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Cores {
	return predicate.Cores(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Cores {
	return predicate.Cores(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Cores {
	return predicate.Cores(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Cores {
	return predicate.Cores(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Cores {
	return predicate.Cores(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Cores {
	return predicate.Cores(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "Name" field. It's identical to NameEQ.
func Name(v string) predicate.Cores {
	return predicate.Cores(sql.FieldEQ(FieldName, v))
}

// Status applies equality check predicate on the "Status" field. It's identical to StatusEQ.
func Status(v string) predicate.Cores {
	return predicate.Cores(sql.FieldEQ(FieldStatus, v))
}

// Count applies equality check predicate on the "Count" field. It's identical to CountEQ.
func Count(v int) predicate.Cores {
	return predicate.Cores(sql.FieldEQ(FieldCount, v))
}

// Created applies equality check predicate on the "Created" field. It's identical to CreatedEQ.
func Created(v string) predicate.Cores {
	return predicate.Cores(sql.FieldEQ(FieldCreated, v))
}

// Updated applies equality check predicate on the "Updated" field. It's identical to UpdatedEQ.
func Updated(v string) predicate.Cores {
	return predicate.Cores(sql.FieldEQ(FieldUpdated, v))
}

// NameEQ applies the EQ predicate on the "Name" field.
func NameEQ(v string) predicate.Cores {
	return predicate.Cores(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "Name" field.
func NameNEQ(v string) predicate.Cores {
	return predicate.Cores(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "Name" field.
func NameIn(vs ...string) predicate.Cores {
	return predicate.Cores(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "Name" field.
func NameNotIn(vs ...string) predicate.Cores {
	return predicate.Cores(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "Name" field.
func NameGT(v string) predicate.Cores {
	return predicate.Cores(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "Name" field.
func NameGTE(v string) predicate.Cores {
	return predicate.Cores(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "Name" field.
func NameLT(v string) predicate.Cores {
	return predicate.Cores(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "Name" field.
func NameLTE(v string) predicate.Cores {
	return predicate.Cores(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "Name" field.
func NameContains(v string) predicate.Cores {
	return predicate.Cores(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "Name" field.
func NameHasPrefix(v string) predicate.Cores {
	return predicate.Cores(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "Name" field.
func NameHasSuffix(v string) predicate.Cores {
	return predicate.Cores(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "Name" field.
func NameEqualFold(v string) predicate.Cores {
	return predicate.Cores(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "Name" field.
func NameContainsFold(v string) predicate.Cores {
	return predicate.Cores(sql.FieldContainsFold(FieldName, v))
}

// StatusEQ applies the EQ predicate on the "Status" field.
func StatusEQ(v string) predicate.Cores {
	return predicate.Cores(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "Status" field.
func StatusNEQ(v string) predicate.Cores {
	return predicate.Cores(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "Status" field.
func StatusIn(vs ...string) predicate.Cores {
	return predicate.Cores(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "Status" field.
func StatusNotIn(vs ...string) predicate.Cores {
	return predicate.Cores(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "Status" field.
func StatusGT(v string) predicate.Cores {
	return predicate.Cores(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "Status" field.
func StatusGTE(v string) predicate.Cores {
	return predicate.Cores(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "Status" field.
func StatusLT(v string) predicate.Cores {
	return predicate.Cores(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "Status" field.
func StatusLTE(v string) predicate.Cores {
	return predicate.Cores(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "Status" field.
func StatusContains(v string) predicate.Cores {
	return predicate.Cores(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "Status" field.
func StatusHasPrefix(v string) predicate.Cores {
	return predicate.Cores(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "Status" field.
func StatusHasSuffix(v string) predicate.Cores {
	return predicate.Cores(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "Status" field.
func StatusEqualFold(v string) predicate.Cores {
	return predicate.Cores(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "Status" field.
func StatusContainsFold(v string) predicate.Cores {
	return predicate.Cores(sql.FieldContainsFold(FieldStatus, v))
}

// CountEQ applies the EQ predicate on the "Count" field.
func CountEQ(v int) predicate.Cores {
	return predicate.Cores(sql.FieldEQ(FieldCount, v))
}

// CountNEQ applies the NEQ predicate on the "Count" field.
func CountNEQ(v int) predicate.Cores {
	return predicate.Cores(sql.FieldNEQ(FieldCount, v))
}

// CountIn applies the In predicate on the "Count" field.
func CountIn(vs ...int) predicate.Cores {
	return predicate.Cores(sql.FieldIn(FieldCount, vs...))
}

// CountNotIn applies the NotIn predicate on the "Count" field.
func CountNotIn(vs ...int) predicate.Cores {
	return predicate.Cores(sql.FieldNotIn(FieldCount, vs...))
}

// CountGT applies the GT predicate on the "Count" field.
func CountGT(v int) predicate.Cores {
	return predicate.Cores(sql.FieldGT(FieldCount, v))
}

// CountGTE applies the GTE predicate on the "Count" field.
func CountGTE(v int) predicate.Cores {
	return predicate.Cores(sql.FieldGTE(FieldCount, v))
}

// CountLT applies the LT predicate on the "Count" field.
func CountLT(v int) predicate.Cores {
	return predicate.Cores(sql.FieldLT(FieldCount, v))
}

// CountLTE applies the LTE predicate on the "Count" field.
func CountLTE(v int) predicate.Cores {
	return predicate.Cores(sql.FieldLTE(FieldCount, v))
}

// CreatedEQ applies the EQ predicate on the "Created" field.
func CreatedEQ(v string) predicate.Cores {
	return predicate.Cores(sql.FieldEQ(FieldCreated, v))
}

// CreatedNEQ applies the NEQ predicate on the "Created" field.
func CreatedNEQ(v string) predicate.Cores {
	return predicate.Cores(sql.FieldNEQ(FieldCreated, v))
}

// CreatedIn applies the In predicate on the "Created" field.
func CreatedIn(vs ...string) predicate.Cores {
	return predicate.Cores(sql.FieldIn(FieldCreated, vs...))
}

// CreatedNotIn applies the NotIn predicate on the "Created" field.
func CreatedNotIn(vs ...string) predicate.Cores {
	return predicate.Cores(sql.FieldNotIn(FieldCreated, vs...))
}

// CreatedGT applies the GT predicate on the "Created" field.
func CreatedGT(v string) predicate.Cores {
	return predicate.Cores(sql.FieldGT(FieldCreated, v))
}

// CreatedGTE applies the GTE predicate on the "Created" field.
func CreatedGTE(v string) predicate.Cores {
	return predicate.Cores(sql.FieldGTE(FieldCreated, v))
}

// CreatedLT applies the LT predicate on the "Created" field.
func CreatedLT(v string) predicate.Cores {
	return predicate.Cores(sql.FieldLT(FieldCreated, v))
}

// CreatedLTE applies the LTE predicate on the "Created" field.
func CreatedLTE(v string) predicate.Cores {
	return predicate.Cores(sql.FieldLTE(FieldCreated, v))
}

// CreatedContains applies the Contains predicate on the "Created" field.
func CreatedContains(v string) predicate.Cores {
	return predicate.Cores(sql.FieldContains(FieldCreated, v))
}

// CreatedHasPrefix applies the HasPrefix predicate on the "Created" field.
func CreatedHasPrefix(v string) predicate.Cores {
	return predicate.Cores(sql.FieldHasPrefix(FieldCreated, v))
}

// CreatedHasSuffix applies the HasSuffix predicate on the "Created" field.
func CreatedHasSuffix(v string) predicate.Cores {
	return predicate.Cores(sql.FieldHasSuffix(FieldCreated, v))
}

// CreatedEqualFold applies the EqualFold predicate on the "Created" field.
func CreatedEqualFold(v string) predicate.Cores {
	return predicate.Cores(sql.FieldEqualFold(FieldCreated, v))
}

// CreatedContainsFold applies the ContainsFold predicate on the "Created" field.
func CreatedContainsFold(v string) predicate.Cores {
	return predicate.Cores(sql.FieldContainsFold(FieldCreated, v))
}

// UpdatedEQ applies the EQ predicate on the "Updated" field.
func UpdatedEQ(v string) predicate.Cores {
	return predicate.Cores(sql.FieldEQ(FieldUpdated, v))
}

// UpdatedNEQ applies the NEQ predicate on the "Updated" field.
func UpdatedNEQ(v string) predicate.Cores {
	return predicate.Cores(sql.FieldNEQ(FieldUpdated, v))
}

// UpdatedIn applies the In predicate on the "Updated" field.
func UpdatedIn(vs ...string) predicate.Cores {
	return predicate.Cores(sql.FieldIn(FieldUpdated, vs...))
}

// UpdatedNotIn applies the NotIn predicate on the "Updated" field.
func UpdatedNotIn(vs ...string) predicate.Cores {
	return predicate.Cores(sql.FieldNotIn(FieldUpdated, vs...))
}

// UpdatedGT applies the GT predicate on the "Updated" field.
func UpdatedGT(v string) predicate.Cores {
	return predicate.Cores(sql.FieldGT(FieldUpdated, v))
}

// UpdatedGTE applies the GTE predicate on the "Updated" field.
func UpdatedGTE(v string) predicate.Cores {
	return predicate.Cores(sql.FieldGTE(FieldUpdated, v))
}

// UpdatedLT applies the LT predicate on the "Updated" field.
func UpdatedLT(v string) predicate.Cores {
	return predicate.Cores(sql.FieldLT(FieldUpdated, v))
}

// UpdatedLTE applies the LTE predicate on the "Updated" field.
func UpdatedLTE(v string) predicate.Cores {
	return predicate.Cores(sql.FieldLTE(FieldUpdated, v))
}

// UpdatedContains applies the Contains predicate on the "Updated" field.
func UpdatedContains(v string) predicate.Cores {
	return predicate.Cores(sql.FieldContains(FieldUpdated, v))
}

// UpdatedHasPrefix applies the HasPrefix predicate on the "Updated" field.
func UpdatedHasPrefix(v string) predicate.Cores {
	return predicate.Cores(sql.FieldHasPrefix(FieldUpdated, v))
}

// UpdatedHasSuffix applies the HasSuffix predicate on the "Updated" field.
func UpdatedHasSuffix(v string) predicate.Cores {
	return predicate.Cores(sql.FieldHasSuffix(FieldUpdated, v))
}

// UpdatedEqualFold applies the EqualFold predicate on the "Updated" field.
func UpdatedEqualFold(v string) predicate.Cores {
	return predicate.Cores(sql.FieldEqualFold(FieldUpdated, v))
}

// UpdatedContainsFold applies the ContainsFold predicate on the "Updated" field.
func UpdatedContainsFold(v string) predicate.Cores {
	return predicate.Cores(sql.FieldContainsFold(FieldUpdated, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Cores) predicate.Cores {
	return predicate.Cores(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Cores) predicate.Cores {
	return predicate.Cores(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Cores) predicate.Cores {
	return predicate.Cores(sql.NotPredicates(p))
}
