// Code generated by ent, DO NOT EDIT.

package cores

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the cores type in the database.
	Label = "cores"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCount holds the string denoting the count field in the database.
	FieldCount = "count"
	// FieldCreated holds the string denoting the created field in the database.
	FieldCreated = "created"
	// FieldUpdated holds the string denoting the updated field in the database.
	FieldUpdated = "updated"
	// Table holds the table name of the cores in the database.
	Table = "cores"
)

// Columns holds all SQL columns for cores fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldStatus,
	FieldCount,
	FieldCreated,
	FieldUpdated,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCount holds the default value on creation for the "Count" field.
	DefaultCount int
	// DefaultCreated holds the default value on creation for the "Created" field.
	DefaultCreated func() string
	// DefaultUpdated holds the default value on creation for the "Updated" field.
	DefaultUpdated func() string
)

// OrderOption defines the ordering options for the Cores queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the Name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByStatus orders the results by the Status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCount orders the results by the Count field.
func ByCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCount, opts...).ToFunc()
}

// ByCreated orders the results by the Created field.
func ByCreated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreated, opts...).ToFunc()
}

// ByUpdated orders the results by the Updated field.
func ByUpdated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdated, opts...).ToFunc()
}
