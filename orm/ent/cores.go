// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"semantiker/orm/ent/cores"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Cores is the model entity for the Cores schema.
type Cores struct {
	config `json:"-" validate:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name" validate:"required"`
	// Status holds the value of the "Status" field.
	Status string `json:"Status"`
	// Count holds the value of the "Count" field.
	Count int `json:"Count"`
	// Created holds the value of the "Created" field.
	Created string `json:"Created"`
	// Updated holds the value of the "Updated" field.
	Updated      string `json:"Updated"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Cores) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cores.FieldID, cores.FieldCount:
			values[i] = new(sql.NullInt64)
		case cores.FieldName, cores.FieldStatus, cores.FieldCreated, cores.FieldUpdated:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Cores fields.
func (c *Cores) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cores.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case cores.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case cores.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Status", values[i])
			} else if value.Valid {
				c.Status = value.String
			}
		case cores.FieldCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Count", values[i])
			} else if value.Valid {
				c.Count = int(value.Int64)
			}
		case cores.FieldCreated:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Created", values[i])
			} else if value.Valid {
				c.Created = value.String
			}
		case cores.FieldUpdated:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Updated", values[i])
			} else if value.Valid {
				c.Updated = value.String
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Cores.
// This includes values selected through modifiers, order, etc.
func (c *Cores) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// Update returns a builder for updating this Cores.
// Note that you need to call Cores.Unwrap() before calling this method if this Cores
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Cores) Update() *CoresUpdateOne {
	return NewCoresClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Cores entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Cores) Unwrap() *Cores {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Cores is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Cores) String() string {
	var builder strings.Builder
	builder.WriteString("Cores(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("Name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("Status=")
	builder.WriteString(c.Status)
	builder.WriteString(", ")
	builder.WriteString("Count=")
	builder.WriteString(fmt.Sprintf("%v", c.Count))
	builder.WriteString(", ")
	builder.WriteString("Created=")
	builder.WriteString(c.Created)
	builder.WriteString(", ")
	builder.WriteString("Updated=")
	builder.WriteString(c.Updated)
	builder.WriteByte(')')
	return builder.String()
}

// CoresSlice is a parsable slice of Cores.
type CoresSlice []*Cores
