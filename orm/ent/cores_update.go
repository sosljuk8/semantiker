// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"semantiker/orm/ent/cores"
	"semantiker/orm/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CoresUpdate is the builder for updating Cores entities.
type CoresUpdate struct {
	config
	hooks    []Hook
	mutation *CoresMutation
}

// Where appends a list predicates to the CoresUpdate builder.
func (cu *CoresUpdate) Where(ps ...predicate.Cores) *CoresUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "Name" field.
func (cu *CoresUpdate) SetName(s string) *CoresUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (cu *CoresUpdate) SetNillableName(s *string) *CoresUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetStatus sets the "Status" field.
func (cu *CoresUpdate) SetStatus(s string) *CoresUpdate {
	cu.mutation.SetStatus(s)
	return cu
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (cu *CoresUpdate) SetNillableStatus(s *string) *CoresUpdate {
	if s != nil {
		cu.SetStatus(*s)
	}
	return cu
}

// SetCount sets the "Count" field.
func (cu *CoresUpdate) SetCount(i int) *CoresUpdate {
	cu.mutation.ResetCount()
	cu.mutation.SetCount(i)
	return cu
}

// SetNillableCount sets the "Count" field if the given value is not nil.
func (cu *CoresUpdate) SetNillableCount(i *int) *CoresUpdate {
	if i != nil {
		cu.SetCount(*i)
	}
	return cu
}

// AddCount adds i to the "Count" field.
func (cu *CoresUpdate) AddCount(i int) *CoresUpdate {
	cu.mutation.AddCount(i)
	return cu
}

// SetCreated sets the "Created" field.
func (cu *CoresUpdate) SetCreated(s string) *CoresUpdate {
	cu.mutation.SetCreated(s)
	return cu
}

// SetNillableCreated sets the "Created" field if the given value is not nil.
func (cu *CoresUpdate) SetNillableCreated(s *string) *CoresUpdate {
	if s != nil {
		cu.SetCreated(*s)
	}
	return cu
}

// SetUpdated sets the "Updated" field.
func (cu *CoresUpdate) SetUpdated(s string) *CoresUpdate {
	cu.mutation.SetUpdated(s)
	return cu
}

// SetNillableUpdated sets the "Updated" field if the given value is not nil.
func (cu *CoresUpdate) SetNillableUpdated(s *string) *CoresUpdate {
	if s != nil {
		cu.SetUpdated(*s)
	}
	return cu
}

// Mutation returns the CoresMutation object of the builder.
func (cu *CoresUpdate) Mutation() *CoresMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CoresUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CoresUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CoresUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CoresUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CoresUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(cores.Table, cores.Columns, sqlgraph.NewFieldSpec(cores.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(cores.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(cores.FieldStatus, field.TypeString, value)
	}
	if value, ok := cu.mutation.Count(); ok {
		_spec.SetField(cores.FieldCount, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedCount(); ok {
		_spec.AddField(cores.FieldCount, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Created(); ok {
		_spec.SetField(cores.FieldCreated, field.TypeString, value)
	}
	if value, ok := cu.mutation.Updated(); ok {
		_spec.SetField(cores.FieldUpdated, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cores.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CoresUpdateOne is the builder for updating a single Cores entity.
type CoresUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CoresMutation
}

// SetName sets the "Name" field.
func (cuo *CoresUpdateOne) SetName(s string) *CoresUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (cuo *CoresUpdateOne) SetNillableName(s *string) *CoresUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetStatus sets the "Status" field.
func (cuo *CoresUpdateOne) SetStatus(s string) *CoresUpdateOne {
	cuo.mutation.SetStatus(s)
	return cuo
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (cuo *CoresUpdateOne) SetNillableStatus(s *string) *CoresUpdateOne {
	if s != nil {
		cuo.SetStatus(*s)
	}
	return cuo
}

// SetCount sets the "Count" field.
func (cuo *CoresUpdateOne) SetCount(i int) *CoresUpdateOne {
	cuo.mutation.ResetCount()
	cuo.mutation.SetCount(i)
	return cuo
}

// SetNillableCount sets the "Count" field if the given value is not nil.
func (cuo *CoresUpdateOne) SetNillableCount(i *int) *CoresUpdateOne {
	if i != nil {
		cuo.SetCount(*i)
	}
	return cuo
}

// AddCount adds i to the "Count" field.
func (cuo *CoresUpdateOne) AddCount(i int) *CoresUpdateOne {
	cuo.mutation.AddCount(i)
	return cuo
}

// SetCreated sets the "Created" field.
func (cuo *CoresUpdateOne) SetCreated(s string) *CoresUpdateOne {
	cuo.mutation.SetCreated(s)
	return cuo
}

// SetNillableCreated sets the "Created" field if the given value is not nil.
func (cuo *CoresUpdateOne) SetNillableCreated(s *string) *CoresUpdateOne {
	if s != nil {
		cuo.SetCreated(*s)
	}
	return cuo
}

// SetUpdated sets the "Updated" field.
func (cuo *CoresUpdateOne) SetUpdated(s string) *CoresUpdateOne {
	cuo.mutation.SetUpdated(s)
	return cuo
}

// SetNillableUpdated sets the "Updated" field if the given value is not nil.
func (cuo *CoresUpdateOne) SetNillableUpdated(s *string) *CoresUpdateOne {
	if s != nil {
		cuo.SetUpdated(*s)
	}
	return cuo
}

// Mutation returns the CoresMutation object of the builder.
func (cuo *CoresUpdateOne) Mutation() *CoresMutation {
	return cuo.mutation
}

// Where appends a list predicates to the CoresUpdate builder.
func (cuo *CoresUpdateOne) Where(ps ...predicate.Cores) *CoresUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CoresUpdateOne) Select(field string, fields ...string) *CoresUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Cores entity.
func (cuo *CoresUpdateOne) Save(ctx context.Context) (*Cores, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CoresUpdateOne) SaveX(ctx context.Context) *Cores {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CoresUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CoresUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CoresUpdateOne) sqlSave(ctx context.Context) (_node *Cores, err error) {
	_spec := sqlgraph.NewUpdateSpec(cores.Table, cores.Columns, sqlgraph.NewFieldSpec(cores.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Cores.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cores.FieldID)
		for _, f := range fields {
			if !cores.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cores.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(cores.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(cores.FieldStatus, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Count(); ok {
		_spec.SetField(cores.FieldCount, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedCount(); ok {
		_spec.AddField(cores.FieldCount, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Created(); ok {
		_spec.SetField(cores.FieldCreated, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Updated(); ok {
		_spec.SetField(cores.FieldUpdated, field.TypeString, value)
	}
	_node = &Cores{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cores.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
